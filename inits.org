#+TITLE: M-EMACS
#+OPTIONS: toc:nil
#+EXPORT_FILE_NAME: README.md
* About
  M-EMACS is a custom GNU Emacs setup and configurations that aims to enhance the default Emacs experience. This configuration is designed that, if the user clones this repository into their =HOME= directory set in Windows Environment Variables, and there is a stable connection to Melpa Packages, then they can use most of my custom EMACS configurations out-of-the-box! Exceptions are noted as *Prerequisite*, simple =Ctrl-F= will lead you there.

  This configuration is designed and tested for *GNU Emacs 25.1 and above only*.
*** Cool Thing About This README
    This README originated from [[file:init.org][init.org]] that is generated using =M-x org-gfm-export-to-markdown=. Every block of code is generated through this function - it exports the section of code from =elisp/= directory. You will not see their presence in
*** Modifications?
    Of course you can modify M-EMACS! You have the permission to use, modify, distribute however you want and free of charge, but without any warranty. (See [[file:LICENSE][LICENSE]])

    *Remember* you must manually sync this README with all the new changes you made by:
    1. If you add a new mode, create a new =<file-name>.el= file in =elisp/= directory.
    2. Put =(require '<file-name>)= in [[file:init.el][init.el]] accordingly.
    3. Add =#+INCLUDE: "~/.emacs.d/elisp/<place-holder>.el" src emacs-lisp :lines "<start-line>-<end-line-exclusive>"= in the appropriate section in [[file:init.org][init.org]].
    4. Call =M-x org-gfm-export-to-markdown= to update this README.
* Table of Contents                                               :TOC_2_org:
- [[About][About]]
- [[Startup][Startup]]
  - [[Lexical-binding][Lexical-binding]]
  - [[Disable Unnecessary Interface][Disable Unnecessary Interface]]
  - [[Optimization][Optimization]]
- [[Package Management][Package Management]]
  - [[Melpa Packages][Melpa Packages]]
  - [[Configure Package Management][Configure Package Management]]
  - [[Use-Package Wrapper][Use-Package Wrapper]]
  - [[Auto Package Update][Auto Package Update]]
- [[Global Functionalities][Global Functionalities]]
  - [[Owner Information][Owner Information]]
  - [[Bindings][Bindings]]
  - [[Directory Management][Directory Management]]
  - [[AG][AG]]
  - [[Avy][Avy]]
  - [[Ivy][Ivy]]
  - [[Winner][Winner]]
  - [[Swiper][Swiper]]
  - [[Which Key][Which Key]]
  - [[Popup Kill Ring][Popup Kill Ring]]
  - [[Undo Tree][Undo Tree]]
  - [[Discover My Major][Discover My Major]]
  - [[Configs][Configs]]
  - [[More Functions][More Functions]]
- [[User Interface Enhancements][User Interface Enhancements]]
  - [[Title Bar][Title Bar]]
  - [[All The Icons][All The Icons]]
  - [[Doom Theme][Doom Theme]]
  - [[Doom Modeline][Doom Modeline]]
  - [[Dashboard][Dashboard]]
  - [[Page Break Lines][Page Break Lines]]
  - [[Fonts][Fonts]]
  - [[Zone Mode Screensaver][Zone Mode Screensaver]]
  - [[Diminish][Diminish]]
  - [[Dimmer][Dimmer]]
  - [[Smooth Scroll][Smooth Scroll]]
  - [[Line Numbers][Line Numbers]]
  - [[Pretty Symbols][Pretty Symbols]]
  - [[UI Configs][UI Configs]]
- [[General Programming][General Programming]]
  - [[Magit][Magit]]
  - [[Projectile][Projectile]]
  - [[Treemacs][Treemacs]]
  - [[Company][Company]]
  - [[Flycheck][Flycheck]]
  - [[Dumb Jump][Dumb Jump]]
  - [[Parenthesis Pairing][Parenthesis Pairing]]
  - [[Format All][Format All]]
  - [[Highlight Indent Guides][Highlight Indent Guides]]
  - [[LSP][LSP]]
- [[Programming][Programming]]
  - [[Emacs Lisp][Emacs Lisp]]
  - [[Java][Java]]
  - [[C/C++][C/C++]]
  - [[Python][Python]]
  - [[Arduino][Arduino]]
- [[Web Development][Web Development]]
  - [[Web Mode][Web Mode]]
  - [[Emmet][Emmet]]
  - [[JavaScript][JavaScript]]
  - [[TypeScript][TypeScript]]
- [[Miscellaneous][Miscellaneous]]
  - [[Org][Org]]
  - [[EWW][EWW]]
  - [[Tetris][Tetris]]
  - [[Speed Type][Speed Type]]
  - [[2048 Game][2048 Game]]
- [[Credits][Credits]]

* Startup
** Lexical-binding
   Use lexical-binding. [[https://nullprogram.com/blog/2016/12/22/][Why?]]
   #+BEGIN_QUOTE
   Until Emacs 24.1 (June 2012), Elisp only had dynamically scoped variables, a feature, mostly by accident, common to old lisp dialects. While dynamic scope has some selective uses, it’s widely regarded as a mistake for local variables, and virtually no other languages have adopted it.
   #+END_QUOTE
   #+INCLUDE: "~/.emacs.d/elisp/init-customization.el" src emacs-lisp :lines "1-2"
** Disable Unnecessary Interface
   This need to be in the beginning of initialization to smooth the experience.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :lines "10-14"
** Optimization
   Avoid garbage collection during startup.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :lines "16-25"
   Unset file name handler alist.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :lines "26-34"
   Load all elisp files in =elisp/= and =site-elisp/= to reduce startup time.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :lines "36-51"
* Package Management
** Melpa Packages
   #+INCLUDE: "~/.emacs.d/elisp/init-package-management.el" src emacs-lisp :lines "4-13"
** Configure Package Management
   #+INCLUDE: "~/.emacs.d/elisp/init-package-management.el" src emacs-lisp :lines "15-27"
** Use-Package Wrapper
   My Emacs configuration is almost entirely dependant on a faster implementation of [[https://github.com/jwiegley/use-package][use-package]] based on [[https://github.com/hlissner/doom-emacs/blob/master/core/core-packages.el#L323][Doom Emacs]].
   #+BEGIN_QUOTE
   The =use-package= macro allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy. I created it because I have over 80 packages that I use in Emacs, and things were getting difficult to manage. Yet with this utility my total load time is around 2 seconds, with no loss of functionality!
   #+END_QUOTE
   Add the macro generated list of package.el loadpaths to load-path.
   #+INCLUDE: "~/.emacs.d/elisp/init-package-management.el" src emacs-lisp :lines "29-54"
   The =use-package= wrapper.
   #+INCLUDE: "~/.emacs.d/elisp/init-package-management.el" src emacs-lisp :lines "55-64"
** Auto Package Update
   [[https://github.com/rranelli/auto-package-update.el][Auto package update]] automatically updates installed packages if at least =auto-package-update-interval= days have passed since the last update.
   #+INCLUDE: "~/.emacs.d/elisp/init-package-management.el" src emacs-lisp :lines "66-71"
* Global Functionalities
** Owner Information
   *Prerequisite*: Change this to your information.
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Mingde (Matthew) Zeng")
     (setq user-mail-address "matthewzmd@gmail.com")
   #+END_SRC
** Bindings
   Unbind C-z to use as prefix
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-z") nil)
   #+END_SRC
   Use iBuffer instead of Buffer List
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC
   Truncate lines
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-!") 'toggle-truncate-lines)
   #+END_SRC
   Adjust font size like web browsers
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-+") 'text-scale-increase)
     (global-set-key (kbd"C--") 'text-scale-decrease)
   #+END_SRC
   Move up/down paragraph
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-n") 'forward-paragraph)
     (global-set-key (kbd "M-p") 'backward-paragraph)
   #+END_SRC
** Directory Management
*** Dired
    Dired, the directory editor.
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :lines "3-26"
*** Autosave and Backup
    Create directory where Emacs stores backups and autosave files.
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :lines "28-30"
    Set autosave and backup directory.
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :lines "31-36"
*** Rename Both File and Buffer
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :lines "39-53"
*** File Configs
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :lines "54-62"
** AG
   [[https://github.com/ggreer/the_silver_searcher][AG The Silver Searcher]], a code-searching tool similar to ack, but faster.

   *Prerequisite*: [[https://github.com/k-takata/the_silver_searcher-win32][AG for Windows]] must be installed and put in the Path.
   #+BEGIN_SRC emacs-lisp
     (def-package ag
       :defer t
       :bind ("C-z s" . ag))
   #+END_SRC
** Avy
   [[https://github.com/abo-abo/avy][Avy]], a nice way to move around text.
   #+BEGIN_SRC emacs-lisp
     (def-package avy
       :defer t
       :bind
       (("C-;" . avy-goto-char-timer)
        ("C-:" . avy-goto-line))
       :config
       (setq avy-timeout-seconds 0.3)
       (setq avy-style 'pre))
   #+END_SRC
** Ivy
*** Main Ivy
    [[https://github.com/abo-abo/swiper][Ivy]], a generic completion mechanism for Emacs.
    #+BEGIN_SRC emacs-lisp
      (def-package ivy
        :diminish ivy-mode
        :init (ivy-mode 1)
        :config
        (setq ivy-use-virtual-buffers t)
        (setq ivy-height 10)
        (setq ivy-on-del-error-function nil)
        (setq ivy-magic-slash-non-match-action nil)
        (setq ivy-count-format "【%d/%d】")
        (setq ivy-wrap t))
   #+END_SRC
*** Amx
    [[https://github.com/DarwinAwardWinner/amx][Amx]], a M-x enhancement tool forked from [[https://github.com/nonsequitur/smex][Smex]].
    #+BEGIN_SRC emacs-lisp
      (def-package amx
        :after (:any ivy ido)
        :config (amx-mode))
    #+END_SRC
*** Counsel
    [[https://github.com/abo-abo/swiper][Counsel]], a collection of Ivy-enhanced versions of common Emacs commands.
    #+BEGIN_SRC emacs-lisp
      (def-package counsel
        :after ivy
        :diminish counsel-mode
        :init (counsel-mode 1))
    #+END_SRC
** Winner
   Winner mode restores old window layout.
   #+BEGIN_SRC emacs-lisp
     (def-package winner
       :ensure nil
       :commands (winner-undo winner-redo)
       :init (setq winner-boring-buffers
                   '("*Completions*"
                     "*Compile-Log*"
                     "*inferior-lisp*"
                     "*Fuzzy Completions*"
                     "*Apropos*"
                     "*Help*"
                     "*cvs*"
                     "*Buffer List*"
                     "*Ibuffer*"
                     "*esh command on file*")))
   #+END_SRC
** Swiper
   [[https://github.com/abo-abo/swiper][Swiper]], an Ivy-enhanced alternative to isearch.
   #+BEGIN_SRC emacs-lisp
     (def-package swiper
       :bind ("C-s" . swiper))
   #+END_SRC
** Which Key
   [[https://github.com/justbur/emacs-which-key][Which key]], a feature that displays the key bindings following the incomplete command.
   #+BEGIN_SRC emacs-lisp
     (def-package which-key
       :diminish
       :init
       (setq which-key-separator " ")
       (setq which-key-prefix-prefix "+")
       :config
       (which-key-mode))
   #+END_SRC
** Popup Kill Ring
   [[https://github.com/waymondo/popup-kill-ring][Popup kill ring]], a feature that provides the ability to browse Emacs kill ring in autocomplete style popup menu.
   #+BEGIN_SRC emacs-lisp
     (def-package popup-kill-ring
       :bind ("M-y" . popup-kill-ring))
   #+END_SRC
** Undo Tree
   [[https://www.emacswiki.org/emacs/UndoTree][Undo tree]], a feature that provides a visualization of the undos in a file.
   #+BEGIN_SRC emacs-lisp
     (def-package undo-tree
       :defer t
       :diminish undo-tree-mode
       :init (global-undo-tree-mode))
   #+END_SRC
** Discover My Major
   [[https://github.com/jguenther/discover-my-major][Discover my major]], a feature that discovers key bindings and their meaning for the current Emacs major mode.
   #+BEGIN_SRC emacs-lisp
     (def-package discover-my-major
       :bind (("C-h C-m" . discover-my-major)))
   #+END_SRC
** Configs
   Some essential configs that make my life a lot easier.
*** UTF-8 Coding System
    Use UTF-8 as much as possible with unix line endings.
    #+BEGIN_SRC emacs-lisp
      (prefer-coding-system 'utf-8-unix)
      (set-language-environment "UTF-8")
      (set-default-coding-systems 'utf-8-unix)
      (set-terminal-coding-system 'utf-8-unix)
      (set-keyboard-coding-system 'utf-8-unix)
      (set-selection-coding-system 'utf-8-unix)
      (setq locale-coding-system 'utf-8-unix)
      ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
      (when (display-graphic-p)
        (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
    #+END_SRC
*** Turn Off Cursor Alarms
    #+BEGIN_SRC
      (setq ring-bell-function 'ignore)
    #+END_SRC
*** Turn Off Blink Cursor
    #+BEGIN_SRC emacs-lisp
      (blink-cursor-mode -1)
    #+END_SRC
*** Show Keystrokes in Progress Instantly
    #+BEGIN_SRC emacs-lisp
      ;; Show keystrokes in progress
      (setq echo-keystrokes 0.1)
    #+END_SRC
*** Optimize Editing Experience
    #+BEGIN_SRC emacs-lisp
      ;; Remove useless whitespace before saving a file
      (add-hook 'before-save-hook 'whitespace-cleanup)
      (add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))

      ;; Make sentences end with a single space
      (setq-default sentence-end-double-space nil)

      ;; When buffer is closed, saves the cursor location
      (save-place-mode 1)

      ;; Disable Shift mark
      (setq shift-select-mode nil)

      ;; Replace selection on insert
      (delete-selection-mode 1)

      ;; Merge system clipboard with Emacs
      (setq-default select-enable-clipboard t)

      ;; Prevent Extraneous Tabs
      (setq-default indent-tabs-mode nil)
    #+END_SRC
*** Automatic Garbage Collect
    Garbage collect when Emacs is not in focus.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'focus-out-hook #'garbage-collect)
    #+END_SRC
*** Move Custom-Set-Variables to Different File
    #+BEGIN_SRC emacs-lisp
      (setq custom-file (concat user-emacs-directory "elisp/init-customization.el"))
      (load custom-file 'noerror)
    #+END_SRC
** More Functions
   Other important, but longer functions.
*** Resize Window Width / Height Functions
    #+BEGIN_SRC emacs-lisp
      ;; Resizes the window width based on the input
      (defun window-resize-width (w)
        "Resizes the window width based on W."
        (interactive (list (if (> (count-windows) 1)
                               (read-number "Set the current window width in [1~9]x10%: ")
                             (error "You need more than 1 window to execute this function!"))))
        (message "%s" w)
        (window-resize nil (- (truncate (* (/ w 10.0) (frame-width))) (window-total-width)) t))

      ;; Resizes the window height based on the input
      (defun window-resize-height (h)
        "Resizes the window height based on H."
        (interactive (list (if (> (count-windows) 1)
                               (read-number "Set the current window height in [1~9]x10%: ")
                             (error "You need more than 1 window to execute this function!"))))
        (message "%s" h)
        (window-resize nil (- (truncate (* (/ h 10.0) (frame-height))) (window-total-height)) nil))

      ;; Setup shorcuts for window resize width and height
      (global-set-key (kbd "C-x C-|") #'window-resize-width)
      (global-set-key (kbd "C-x C-_") #'window-resize-height)
    #+END_SRC
*** Edit This Configuration File Shortcut
    #+BEGIN_SRC emacs-lisp
      (defun edit-configs ()
        "Opens the README.org file."
        (interactive)
        (find-file "~/.emacs.d/README.org"))

      (global-set-key (kbd "C-z e") #'edit-configs)
    #+END_SRC
*** Smarter Move Beginning of Line
    Smarter navigation to the beginning of a line by [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][Bozhidar Batsov]].
    #+BEGIN_SRC emacs-lisp
      (defun smarter-move-beginning-of-line (arg)
        "Move point back to indentation of beginning of line.

      Move point to the first non-whitespace character on this line.
      If point is already there, move to the beginning of the line.
      Effectively toggle between the first non-whitespace character and
      the beginning of the line.

      If ARG is not nil or 1, move forward ARG - 1 lines first.  If
      point reaches the beginning or end of the buffer, stop there."
        (interactive "^p")
        (setq arg (or arg 1))

        ;; Move lines first
        (when (/= arg 1)
          (let ((line-move-visual nil))
            (forward-line (1- arg))))

        (let ((orig-point (point)))
          (back-to-indentation)
          (when (= orig-point (point))
            (move-beginning-of-line 1))))

      ;; remap C-a to `smarter-move-beginning-of-line'
      (global-set-key [remap move-beginning-of-line]
                      'smarter-move-beginning-of-line)
    #+END_SRC
* User Interface Enhancements
** Title Bar
   #+BEGIN_SRC emacs-lisp
     (setq-default frame-title-format '("M-EMACS - " user-login-name "@" system-name " - %b"))
   #+END_SRC
** All The Icons
   [[https://github.com/domtronn/all-the-icons.el][All The Icons]], a utility package to collect various Icon Fonts and propertize them within Emacs.

   *Prerequisite*: Install all fonts from =/fonts/all-the-icons-fonts=.
   #+BEGIN_SRC emacs-lisp
     (def-package all-the-icons)
   #+END_SRC
*** All The Icons Dired
    [[https://github.com/jtbm37/all-the-icons-dired][All The Icons Dired]], an icon set for Dired.
    #+BEGIN_SRC emacs-lisp
      (def-package all-the-icons-dired
        :after all-the-icons
        :diminish
        :config (add-hook 'dired-mode-hook #'all-the-icons-dired-mode)
        :custom-face (all-the-icons-dired-dir-face ((t `(:foreground ,(face-background 'default))))))
    #+END_SRC
*** All The Icons Ivy
    [[https://github.com/asok/all-the-icons-ivy][All The Icons Ivy]], an icon set for Ivy.
    #+BEGIN_SRC emacs-lisp
      (def-package all-the-icons-ivy
        :after all-the-icons
        :config
        (all-the-icons-ivy-setup)
        (setq all-the-icons-ivy-buffer-commands '())
        (setq all-the-icons-ivy-file-commands
              '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir)))
    #+END_SRC
** Doom Theme
   [[https://github.com/hlissner/emacs-doom-themes][doom-themes]], an UI plugin and pack of theme. It is set to default to Molokai theme.
   #+BEGIN_SRC emacs-lisp
     (def-package doom-themes
       :config
       ;; flashing mode-line on errors
       (doom-themes-visual-bell-config)
       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config)
       (load-theme 'doom-molokai t))
   #+END_SRC
** Doom Modeline
   [[https://github.com/seagle0128/doom-modeline][Doom modeline]], a modeline from DOOM Emacs, but more powerful and faster.
   #+BEGIN_SRC emacs-lisp
     (def-package doom-modeline
       :hook (after-init . doom-modeline-mode)
       :config
       ;; Don't compact font caches during GC. Windows Laggy Issue
       (setq inhibit-compacting-font-caches t)
       (setq doom-modeline-minor-modes t)
       ;;(setq doom-modeline-github t) ;; requires ghub package
       (setq doom-modeline-icon t)
       (setq doom-modeline-major-mode-color-icon t)
       (setq doom-modeline-height 15))
   #+END_SRC
** Dashboard
   [[https://github.com/rakanalh/emacs-dashboard][Dashboard]], an extensible Emacs startup screen.

   Use either =KEC_Dark_BK.png= or =KEC_Light_BK.png= depends on the backgrond theme.
   #+BEGIN_SRC emacs-lisp
     (def-package dashboard
       :diminish (dashboard-mode page-break-lines-mode)
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-banner-logo-title "Close the world. Open the nExt.")
       (setq dashboard-startup-banner "~/.emacs.d/images/KEC_Dark_BK_Small.png")

       (defun open-dashboard ()
         "Open the *dashboard* buffer and jump to the first widget."
         (interactive)
         (if (get-buffer dashboard-buffer-name)
             (kill-buffer dashboard-buffer-name))
         (dashboard-insert-startupify-lists)
         (switch-to-buffer dashboard-buffer-name)
         (goto-char (point-min))
         (if (> (length (window-list-1))
                ;; exclude `treemacs' window
                (if (and (fboundp 'treemacs-current-visibility)
                         (eq (treemacs-current-visibility) 'visible)) 2 1))
             (setq dashboard-recover-layout-p t))
         (delete-other-windows))
       (global-set-key (kbd "C-z d") #'open-dashboard)

       ;; Additional Dashboard widgets.
       (defun dashboard-insert-widgets (list-size)
         (insert (format "%d packages loaded in %s.\n" (length package-activated-list) (emacs-init-time)))
         (insert "Navigation: ")
         ;;(insert (make-string (max 0 (floor (/ (- dashboard-banner-length 25) 2))) ?\ ))
         (widget-create 'url-link
                        :tag (propertize "Github" 'face 'font-lock-keyword-face)
                        :help-echo "Open the Emacs Configuration Github page"
                        :mouse-face 'highlight
                        "https://github.com/MatthewZMD/.emacs.d")
         (insert " ")
         (widget-create 'push-button
                        :help-echo "Edit This Emacs' Configuration"
                        :action (lambda (&rest _) (edit-configs))
                        :mouse-face 'highlight
                        :button-prefix ""
                        :button-suffix ""
                        (propertize "Configuration" 'face 'font-lock-keyword-face)))

       (add-to-list 'dashboard-item-generators  '(buttons . dashboard-insert-widgets))
       (add-to-list 'dashboard-items '(buttons)))
   #+END_SRC
** Page Break Lines
   [[https://github.com/purcell/page-break-lines][Page-break-lines]], a feature that displays ugly form feed characters as tidy horizontal rules.
   #+BEGIN_SRC emacs-lisp
     (def-package page-break-lines
       :diminish
       :init (global-page-break-lines-mode))
   #+END_SRC
** Fonts
   Prepares fonts to use.

   *Prerequisite*: Install =Input= and =Love Letter TW= fonts from =/fonts=.
   #+BEGIN_SRC emacs-lisp
     ;; Input Mono, Monaco Style, Line Height 1.3 download from http://input.fontbureau.com/
     (defvar fonts '(("Input" . 11) ("SF Mono" . 12) ("Consolas" . 12) ("Love LetterTW" . 12.5))
       "List of fonts and sizes.  The first one available will be used.")
   #+END_SRC
   Change Font Function.
   #+BEGIN_SRC emacs-lisp
     (defun change-font ()
       "Documentation."
       (interactive)
       (let* (available-fonts font-name font-size font-setting)
         (dolist (font fonts (setq available-fonts (nreverse available-fonts)))
           (when (member (car font) (font-family-list))
             (push font available-fonts)))

         (if (not available-fonts)
             (message "No fonts from the chosen set are available")
           (if (called-interactively-p 'interactive)
               (let* ((chosen (assoc-string (completing-read "What font to use? " available-fonts nil t) available-fonts)))
                 (setq font-name (car chosen) font-size (read-number "Font size: " (cdr chosen))))
             (setq font-name (caar available-fonts) font-size (cdar available-fonts)))

           (setq font-setting (format "%s-%d" font-name font-size))
           (set-frame-font font-setting nil t)
           (add-to-list 'default-frame-alist (cons 'font font-setting)))))

     (change-font)
   #+END_SRC
** Zone Mode Screensaver
   [[https://www.emacswiki.org/emacs/ZoneMode][Zone mode]], a minor-mode 'zones' Emacs out, choosing one of its random modes to obfuscate the current buffer, which is used as my Emacs screensaver.
   #+BEGIN_SRC emacs-lisp
     (def-package zone
       :ensure nil
       :config
       (zone-when-idle 300) ;; in seconds

       (defun zone-choose (pgm)
         "Choose a PGM to run for `zone'."
         (interactive
          (list
           (completing-read
            "Program: "
            (mapcar 'symbol-name zone-programs))))
         (let ((zone-programs (list (intern pgm))))
           (zone))))
   #+END_SRC
** Diminish
   [[https://github.com/emacsmirror/diminish][Diminish]], a feature that removes certain minor modes from mode-line.
   #+BEGIN_SRC emacs-lisp
     (def-package diminish)
   #+END_SRC

** Dimmer
   [[https://github.com/gonewest818/dimmer.el][Dimmer]], a feature that visually highlights the selected buffer.
   #+BEGIN_SRC emacs-lisp
     (def-package dimmer
       :init (dimmer-mode)
       :config
       (setq dimmer-fraction 0.2)
       (setq dimmer-exclusion-regexp "\\*Minibuf-[0-9]+\\*\\|\\*dashboard\\*"))
   #+END_SRC
** Smooth Scroll
   Smoothens Scrolling.
   #+BEGIN_SRC emacs-lisp
     (setq scroll-step 1)
     (setq scroll-margin 1)
     (setq scroll-conservatively 101)
     (setq scroll-up-aggressively 0.01)
     (setq scroll-down-aggressively 0.01)
     (setq auto-window-vscroll nil)
     (setq redisplay-dont-pause t)
     (setq fast-but-imprecise-scrolling nil)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (setq mouse-wheel-progressive-speed nil)
   #+END_SRC
** Line Numbers
   Display line numbers, and column numbers in modeline.
   #+BEGIN_SRC emacs-lisp
     ;; Hook line numbers to only when files are opened
     (if (version< emacs-version "26")
         (progn (add-hook 'find-file-hook #'linum-mode)
                (add-hook 'prog-mode-hook #'linum-mode))
       (progn (add-hook 'find-file-hook #'display-line-numbers-mode)
              (add-hook 'prog-mode-hook #'display-line-numbers-mode)))

     ;; Display column numbers in modeline
     (column-number-mode 1)
   #+END_SRC
** Pretty Symbols
   Pretty the Symbols.
   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode 1)
       (defun add-pretty-lambda ()
         "make some word or string show as pretty Unicode symbols"
         (setq prettify-symbols-alist
               '(
                 ("lambda" . 955)
                 ("->" . 8594)
                 ("=>" . 8658)
                 ("map" . 8614)
                 )))
       (add-hook 'prog-mode-hook 'add-pretty-lambda)
   #+END_SRC
** UI Configs
   Maximize frame.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
   #+END_SRC
   Disable splash screen and change scratch message.
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
     (setq initial-scratch-message ";; Present Day, Present Time...")
   #+END_SRC
   Change yes or no prompts to y or n.
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
* General Programming
** Magit
   [[https://magit.vc/][Magit]], an interface to the version control system Git.
   #+BEGIN_SRC emacs-lisp
     (def-package magit
       :bind ("C-x g" . magit-status))
   #+END_SRC
** Projectile
   [[https://github.com/bbatsov/projectile][Projectile]], a Project Interaction Library for Emacs.

   *Prerequisite*: Install [[https://github.com/bmatzelle/gow][Gow]] before proceding and make sure it is in the Path. Gow is a lightweight installer that installs useful open source UNIX applications compiled as native win32 binaries. Especially, =tr= is needed for Projectile alien indexing.
   #+BEGIN_SRC emacs-lisp
     (def-package projectile
       :bind
       ("C-c p" . projectile-command-map)
       ("C-z i" . projectile-switch-project)
       ("C-z o" . projectile-find-file)
       ("C-z p" . projectile-add-known-project)
       :config
       (projectile-mode +1)
       (setq projectile-completion-system 'ivy)
       (when (eq system-type 'windows-nt)
         (setq projectile-indexing-method 'alien))
       (add-to-list 'projectile-globally-ignored-directories "node_modules"))
   #+END_SRC
** Treemacs
   [[https://github.com/Alexander-Miller/treemacs][Treemacs]], a tree layout file explorer for Emacs.
*** Treemacs
    #+BEGIN_SRC emacs-lisp
      (def-package treemacs
        :init
        (with-eval-after-load 'winum
          (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
        :config
        (progn
          (setq treemacs-collapse-dirs
                (if (executable-find "python") 3 0)
                treemacs-deferred-git-apply-delay   0.5
                treemacs-display-in-side-window     t
                treemacs-file-event-delay     5000
                treemacs-file-follow-delay    0.2
                treemacs-follow-after-init    t
                treemacs-follow-recenter-distance   0.1
                treemacs-git-command-pipe     ""
                treemacs-goto-tag-strategy    'refetch-index
                treemacs-indentation    2
                treemacs-indentation-string   " "
                treemacs-is-never-other-window      nil
                treemacs-max-git-entries      5000
                treemacs-no-png-images        nil
                treemacs-no-delete-other-windows    t
                treemacs-project-follow-cleanup     nil
                treemacs-persist-file   (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
                treemacs-recenter-after-file-follow nil
                treemacs-recenter-after-tag-follow  nil
                treemacs-show-cursor    nil
                treemacs-show-hidden-files    t
                treemacs-silent-filewatch     nil
                treemacs-silent-refresh       nil
                treemacs-sorting        'alphabetic-desc
                treemacs-space-between-root-nodes   t
                treemacs-tag-follow-cleanup   t
                treemacs-tag-follow-delay     1.5
                treemacs-width    35)
          ;; The default width and height of the icons is 22 pixels. If you are
          ;; using a Hi-DPI display, uncomment this to double the icon size.
          ;;(treemacs-resize-icons 44)
          (treemacs-follow-mode t)
          (treemacs-filewatch-mode t)
          (treemacs-fringe-indicator-mode t)
          (pcase (cons (not (null (executable-find "git")))
                       (not (null (executable-find "python3"))))
            (`(t . t) (treemacs-git-mode 'deferred))
            (`(t . _) (treemacs-git-mode 'simple))))
        :bind
        (:map global-map
              ("M-0"       . treemacs-select-window)
              ("C-x t 1"   . treemacs-delete-other-windows)
              ("C-x t t"   . treemacs)
              ("C-x t B"   . treemacs-bookmark)
              ("C-x t C-t" . treemacs-find-file)
              ("C-x t M-t" . treemacs-find-tag)))
   #+END_SRC
*** Treemacs Magit
    #+BEGIN_SRC emacs-lisp
      (def-package treemacs-magit
        :defer t
        :after (treemacs magit))
    #+END_SRC
*** Treemacs Projectile
    #+BEGIN_SRC emacs-lisp
      (def-package treemacs-projectile
        :defer t
        :after (treemacs projectile))
    #+END_SRC
** Company
   [[http://company-mode.github.io/][Company]], short for *Comp*lete *any*thing, a text completion framework for Emacs.
   #+BEGIN_SRC emacs-lisp
     (def-package company
       :diminish company-mode
       :defer t
       :init (global-company-mode)
       :config
       (setq company-minimum-prefix-length 1)
       (setq company-tooltip-align-annotations 't) ; align annotations to the right tooltip border
       (setq company-idle-delay 0) ; decrease delay before autocompletion popup shows
       (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
       (define-key company-mode-map [remap indent-for-tab-command] #'company-indent-or-complete-common)
       (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
       (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
       (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
       (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
       (setq company-require-match 'never))
   #+END_SRC
** Flycheck
   [[https://www.flycheck.org/en/latest/][Flycheck]], a syntax checking extension.
   #+BEGIN_SRC emacs-lisp
     (def-package flycheck
       :defer t
       :hook (prog-mode . flycheck-mode)
       :config
       (flycheck-add-mode 'typescript-tslint 'js2-mode)
       (flycheck-add-mode 'typescript-tslint 'rjsx-mode))
   #+END_SRC
** Dumb Jump
   [[https://github.com/jacktasia/dumb-jump][Dumb jump]], an Emacs "jump to definition" package.
   #+BEGIN_SRC emacs-lisp
     (def-package dumb-jump
       :bind (("M-g o" . dumb-jump-go-other-window)
        ("M-g j" . dumb-jump-go)
        ("M-g i" . dumb-jump-go-prompt)
        ("M-g x" . dumb-jump-go-prefer-external)
        ("M-g z" . dumb-jump-go-prefer-external-other-window))
       :config (setq dumb-jump-selector 'ivy))
   #+END_SRC
** Parenthesis Pairing
   Match and automatically pair parenthesis.
   #+BEGIN_SRC emacs-lisp
     ;; Show matching parenthesis
     (setq show-paren-delay 0)
     (show-paren-mode 1)
   #+END_SRC
*** Smartparens
    [[https://github.com/Fuco1/smartparens][Smartparens]], a minor mode for dealing with pairs.
    #+BEGIN_SRC emacs-lisp
      (def-package smartparens
        :demand t
        :diminish smartparens-mode
        :bind (:map smartparens-mode-map
                    ("C-M-f" . sp-forward-sexp)
                    ("C-M-b" . sp-backward-sexp)
                    ("C-M-d" . sp-down-sexp)
                    ("C-M-a" . sp-backward-down-sexp)
                    ;; C-S-d is bound to dup line
                    ("C-S-b" . sp-beginning-of-sexp)
                    ("C-S-a" . sp-end-of-sexp)
                    ("C-M-e" . sp-up-sexp)
                    ("C-M-u" . sp-backward-up-sexp)
                    ("C-M-t" . sp-transpose-sexp)
                    ("C-M-n" . sp-forward-hybrid-sexp)
                    ("C-M-p" . sp-backward-hybrid-sexp)
                    ("C-M-k" . sp-kill-sexp)
                    ("C-M-w" . sp-copy-sexp)
                    ("M-<delete>" . sp-unwrap-sexp)
                    ;; I like using M-<backspace> to del backwards
                    ;; ("C-<backspace>" . sp-backward-unwrap-sexp)
                    ("C-<right>" . sp-forward-slurp-sexp)
                    ("C-<left>" . sp-forward-barf-sexp)
                    ("C-M-<left>" . sp-backward-slurp-sexp)
                    ("C-M-<right>" . sp-backward-barf-sexp)
                    ("M-D" . sp-splice-sexp)
                    ;; This is Ctrl-Alt-Del lol
                    ;; ("C-M-<delete>" . sp-splice-sexp-killing-forward)
                    ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
                    ("C-S-<backspace>" . sp-splice-sexp-killing-around)
                    ("C-]" . sp-select-next-thing-exchange)
                    ("C-<left_bracket>" . sp-select-previous-thing)
                    ("C-M-]" . sp-select-next-thing)
                    ("M-F" . sp-forward-symbol)
                    ("M-B" . sp-backward-symbol)
                    ("C-\"" . sp-change-inner)
                    ("M-i" . sp-change-enclosing))
        :config
        (smartparens-global-mode)
        ;; Stop pairing single quotes in elisp
        (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
        (sp-local-pair 'org-mode "[" nil :actions nil)
        (setq sp-escape-quotes-after-insert nil))
    #+END_SRC
*** Awesome Pair
    [[https://github.com/manateelazycat/awesome-pair][Awesome Pair]], a feature that provides grammatical parenthesis completion. All I need is this smart kill.
    #+BEGIN_SRC emacs-lisp
      (require 'awesome-pair)

      (add-hook 'prog-mode-hook '(lambda () (awesome-pair-mode 1)))

      (define-key awesome-pair-mode-map (kbd "C-c C-k") 'awesome-pair-kill)
    #+END_SRC
** Format All
   [[https://github.com/lassik/emacs-format-all-the-code][Format all]], a feature that lets you auto-format source code.

   *Prerequisite*: Read [[https://github.com/lassik/emacs-format-all-the-code#supported-languages][Supported Languages]] to see which additional tool you need to install for the specific language.
   #+BEGIN_SRC emacs-lisp
     (def-package format-all
       :bind ("C-z f" . format-all-buffer)
       :config (add-hook 'prog-mode-hook #'format-all-mode))
   #+END_SRC
** Highlight Indent Guides
   [[https://github.com/DarthFennec/highlight-indent-guides][Highlight Indent Guides]], a feature that highlights indentation levels.
   #+BEGIN_SRC emacs-lisp
     (def-package highlight-indent-guides
       :defer t
       :config
       (add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
       (setq highlight-indent-guides-method 'character))
   #+END_SRC
** LSP
   [[https://github.com/emacs-lsp/lsp-mode][LSP]], a client/library for the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].
*** LSP Mode
    #+BEGIN_SRC emacs-lisp
      (def-package lsp-mode
        :defer t
        :commands lsp
        :init
        (setq lsp-auto-guess-root nil)
        (setq lsp-prefer-flymake nil)      ; Use lsp-ui and flycheck
        (setq lsp-message-project-root-warning t)
        :hook (prog-mode . lsp))
    #+END_SRC
*** LSP UI
    [[https://github.com/emacs-lsp/lsp-ui][LSP UI]], provides all the higher level UI modules of lsp-mode, like flycheck support and code lenses.
    #+BEGIN_SRC emacs-lisp
      (def-package lsp-ui
        :after lsp-mode
        :diminish
        :commands lsp-ui-mode
        :custom-face
        (lsp-ui-doc-background ((t (:background nil))))
        (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
        :bind (:map lsp-ui-mode-map
                    ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                    ([remap xref-find-references] . lsp-ui-peek-find-references)
                    ("C-c u" . lsp-ui-imenu))
        :init
        (setq lsp-ui-doc-enable t
              lsp-ui-doc-header t
              lsp-ui-doc-include-signature t
              lsp-ui-doc-position 'top
              lsp-ui-doc-use-webkit t
              lsp-ui-doc-border (face-foreground 'default)

              lsp-ui-sideline-enable t
              lsp-ui-sideline-ignore-duplicate t
              lsp-ui-sideline-show-diagnostics nil
              lsp-ui-sideline-show-symbol t
              lsp-ui-sideline-show-hover t
              lsp-ui-sideline-show-code-actions t)
        :config
        ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
        ;; https://github.com/emacs-lsp/lsp-ui/issues/243
        (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
          (setq mode-line-format nil)))
    #+END_SRC
*** Company LSP
    [[https://github.com/tigersoldier/company-lsp][Company LSP]], a Company completion backend for lsp-mode.
    #+BEGIN_SRC emacs-lisp
      (def-package company-lsp
        :after (company lsp-mode)
        :config
        (setq company-lsp-cache-candidates 'auto)
        :commands company-lsp)
    #+END_SRC
*** DAP
    [[https://github.com/emacs-lsp/dap-mode][DAP]], a client/library for the [[https://code.visualstudio.com/api/extension-guides/debugger-extension][Debug Adapter Protocol]].
    #+BEGIN_SRC emacs-lisp
      (def-package dap-mode
        :after lsp-mode
        :defer t
        :config
        (dap-mode t)
        (dap-ui-mode t))
    #+END_SRC
* Programming
** Emacs Lisp
*** Always Add Lexical Binding to New Elisp File
    #+BEGIN_SRC emacs-lisp
      (add-hook 'emacs-lisp-mode-hook
                (lambda () (let  ((auto-insert-query nil)
                             (auto-insert-alist
                              '((("\\.el\\'" . "Emacs Lisp header")
                                 ""
                                 ";;; -*- lexical-binding: t; -*-\n\n"
                                 '(setq lexical-binding t)))))
                        (auto-insert))))
    #+END_SRC
*** Shortcut for Evaluating Elisp
    Eval-buffer for ELisp Code.
    #+BEGIN_SRC emacs-lisp
      (define-key emacs-lisp-mode-map (kbd "<f5>") #'eval-buffer)
    #+END_SRC
** Java
*** LSP Java
    [[https://github.com/emacs-lsp/lsp-java][LSP Java]], Emacs Java IDE using [[https://projects.eclipse.org/projects/eclipse.jdt.ls][Eclipse JDT Language Server]].

    *Prerequisite*: Install [[https://maven.apache.org/download.cgi][Maven]].
    #+BEGIN_SRC emacs-lisp
      (def-package lsp-java
        :after lsp-mode
        :config (add-hook 'java-mode-hook 'lsp))
    #+END_SRC
** C/C++
   *Prerequisite*:
   - Windows OS: Install [[http://www.mingw.org/wiki/Install_MinGW][MinGW]] for Compilation and [[https://cmake.org/download/][CMake]] >= 2.8.3 first.
   - ALl OS: Install [[https://clang.llvm.org/extra/clangd/Installation.html][Clangd]].

   Note: If Displaying =No LSP server for c-mode=, execute =M-x ielm= and verify clangd is installed using =(executable-find "clangd")= or =(executable-find lsp-clients-clangd-executable)=.

   Compile using =<f5>= or =compile=. The command =gcc -o <file>.exe <fileA>.c <fileB>.c ...= is to compile C code into =<file>.exe=.
*** CC Mode
    CC Mode, a mode for editing files containing C, C++, Objective-C, Java, CORBA IDL (and the variants CORBA PSDL and CIDL), Pike and AWK code.
    #+BEGIN_SRC emacs-lisp
      (def-package cc-mode
        :ensure nil
        :defer t
        :bind ("<f5>" . compile))
    #+END_SRC
    Rest of the features will be provided by [[https://github.com/emacs-lsp/lsp-mode][LSP Mode]].
** Python
*** TODO Microsoft's Python Language Server - [[https://github.com/melpa/melpa/pull/6027][Use Melpa Once it's Ready]]
    [[https://github.com/andrew-christianson/lsp-python-ms][LSP Python MS]], a lsp-mode client leveraging [[https://github.com/Microsoft/python-language-server][Microsoft's Python Language Server]].

    *Prerequisite*:
    Install [[https://dotnet.microsoft.com/download][.NET Core SDK]]. Then execute the following commands from your =HOME= or =~= path:
    #+BEGIN_SRC text
      git clone https://github.com/Microsoft/python-language-server.git
      cd python-language-server/src/LanguageServer/Impl
      dotnet build -c Release
      dotnet publish -c Release -r win10-x64
    #+END_SRC
    Change the value after =-r= flag (=win10-x64=) depending on your architecture and OS. See Microsoft's [[https://docs.microsoft.com/en-us/dotnet/core/rid-catalog][Runtime ID Catalog]] for the correct value for your OS.

    Now, put =~/.emacs.d\python-language-server\output\bin\Release\win10-x64\publish= in your PATH.
   #+BEGIN_SRC emacs-lisp
     (def-package lsp-python-ms
       :after lsp-mode
       :ensure nil
       :hook (python-mode . lsp)
       :config
       ;; for dev build of language server
       (setq lsp-python-ms-dir
             (expand-file-name "~/.emacs.d/python-language-server/output/bin/Release/"))
       ;; for executable of language server, if it's not symlinked on your PATH
       (setq lsp-python-ms-executable
             "~/.emacs.d/python-language-server/output/bin/Release/win10-x64/publish/Microsoft.Python.LanguageServer"))
   #+END_SRC
** Arduino
*** Arduino Mode
    [[https://github.com/bookest/arduino-mode][Arduino mode]], a major mode for editing Arduino sketches.
    #+BEGIN_SRC emacs-lisp
      (def-package arduino-mode
        :defer t
        :config
        (add-to-list 'auto-mode-alist '("\\.ino\\'" . arduino-mode))
        (add-to-list 'auto-mode-alist '("\\.pde\\'" . arduino-mode))
        (autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t))
   #+END_SRC
*** Company Arduino
    [[https://github.com/yuutayamada/company-arduino][Company Arduino]], a set of configuration to let you auto-completion by using irony-mode, company-irony and company-c-headers on arduino-mode.
    #+BEGIN_SRC emacs-lisp
      (def-package company-arduino
        :defer t
        :config
        (add-hook 'irony-mode-hook 'company-arduino-turn-on)
        ;; Activate irony-mode on arduino-mode
        (add-hook 'arduino-mode-hook 'irony-mode))
    #+END_SRC
* Web Development
** Web Mode
   [[https://github.com/fxbois/web-mode][Web mode]], a major mode for editing web templates.
   #+BEGIN_SRC emacs-lisp
     (def-package web-mode
       :mode
       ("\\.phtml\\'" "\\.tpl\\.php\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'"
        "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.[t]?html?\\'" "\\.tsx\\'"))
   #+END_SRC
** Emmet
   [[https://github.com/smihica/emmet-mode][Emmet]], a feature that allows writing HTML using CSS selectors along with =C-j=. See [[https://github.com/smihica/emmet-mode#usage][usage]] for more information.
   #+BEGIN_SRC emacs-lisp
     (def-package emmet-mode
       :hook web-mode
       :config
       (add-hook 'css-mode-hooktype  'emmet-mode)) ;; enable Emmet's css abbreviation
   #+END_SRC
** JavaScript
   [[https://github.com/mooz/js2-mode][JS2 mode]], a feature that offers improved JavsScript editing mode.
   #+BEGIN_SRC emacs-lisp
     (def-package js2-mode
       :mode "\\.js\\'"
       :interpreter "node")
   #+END_SRC
** TypeScript
*** TypeScript Mode
    [[https://github.com/emacs-typescript/typescript.el][TypeScript mode]], a feature that offers TypeScript support for Emacs.
    #+BEGIN_SRC emacs-lisp
      (def-package typescript-mode
        :defer t
        :commands (typescript-mode)
        :bind (:map typescript-mode-map
                    ("M-." . tide-jump-to-definition))
        :init
        (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
        (defun setup-tide-ts ()
          "Setup tide for typescript."
          (interactive)
          (tide-setup)
          (tide-hl-identifier-mode))
        (add-hook 'typescript-mode-hook #'setup-tide-ts))
    #+END_SRC
*** Tide
    [[https://github.com/ananthakumaran/tide][Tide]], a *T*ypeScript *I*nteractive *D*evelopment *E*nvironment for *E*macs.

    Tip: enter =M-.= to jump to definition.
    #+BEGIN_SRC emacs-lisp
      (def-package tide
        :defer t
        :ensure t
        :bind (:map tide-mode-map
                    ("M-." . nil))
        :commands (tide-setup)
        :after (company flycheck))
    #+END_SRC
* Miscellaneous
** Org
   [[https://orgmode.org/][Org]] is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.
   #+BEGIN_SRC emacs-lisp
     (def-package org
       :ensure nil
       :bind
       ("C-c l" . org-store-link)
       ("C-c a" . org-agenda)
       ("C-c c" . org-capture)
       ("C-c b" . org-switch)
       :config
       (setq org-log-done 'time)
       (setq org-todo-keywords
             '((sequence "TODO" "PROCESS" "VERIFY" "|" "DONE"))))
   #+END_SRC
*** TOC Org
    [[https://github.com/snosov1/toc-org][TOC Org]] generates table of contents for =.org= files
    #+BEGIN_SRC emacs-lisp
      (def-package toc-org
        :hook (org-mode . toc-org-mode))
    #+END_SRC
*** HTMLize
    [[https://github.com/hniksic/emacs-htmlize][HTMLize]], a tool that converts buffer text and decorations to HTML.
    #+BEGIN_SRC emacs-lisp
      (use-package htmlize :defer t)
    #+END_SRC
*** OX-GFM
    [[https://github.com/larstvei/ox-gfm][OX-GFM]], a Github Flavored Markdown exporter for Org Mode.
    #+BEGIN_SRC emacs-lisp
      (def-package ox-gfm
        :defer t)
    #+END_SRC
** EWW
   EWW, the Emacs Web Wowser.
*** Set EWW as Default Browser
    In Eww, hit & to browse this url system browser
    #+BEGIN_SRC emacs-lisp
      (setq browse-url-browser-function 'eww-browse-url)
    #+END_SRC
*** Auto-Rename New EWW Buffers
    #+BEGIN_SRC emacs-lisp
      (defun xah-rename-eww-hook ()
        "Rename eww browser's buffer so sites open in new page."
        (rename-buffer "eww" t))
      (add-hook 'eww-mode-hook #'xah-rename-eww-hook)

      ;; C-u M-x eww will force a new eww buffer
      (defun force-new-eww-buffer (orig-fun &rest args)
        "ORIG-FUN ARGS When prefix argument is used, a new eww buffer will be created,
        regardless of whether the current buffer is in `eww-mode'."
        (if current-prefix-arg
            (with-temp-buffer
              (apply orig-fun args))
          (apply orig-fun args)))
      (advice-add 'eww :around #'force-new-eww-buffer)
    #+END_SRC
** Tetris
   Although [[https://www.emacswiki.org/emacs/TetrisMode][Tetris]] is part of Emacs, but there still could be some configurations.
   #+BEGIN_SRC emacs-lisp
     (defvar tetris-mode-map
       (make-sparse-keymap 'tetris-mode-map))
     (define-key tetris-mode-map (kbd "C-p") 'tetris-rotate-prev)
     (define-key tetris-mode-map (kbd "C-n") 'tetris-move-down)
     (define-key tetris-mode-map (kbd "C-b") 'tetris-move-left)
     (define-key tetris-mode-map (kbd "C-f") 'tetris-move-right)
     (define-key tetris-mode-map (kbd "C-SPC") 'tetris-move-bottom)
     (defadvice tetris-end-game (around zap-scores activate)
       (save-window-excursion ad-do-it))
   #+END_SRC
** Speed Type
   [[https://github.com/hagleitn/speed-type][Speed type]], a game to practice touch/speed typing in Emacs.
   #+BEGIN_SRC emacs-lisp
     (def-package speed-type
       :defer t)
   #+END_SRC
** 2048 Game
   [[https://bitbucket.org/zck/2048.el][2048 Game]], an implementation of 2048 in Emacs.
   #+BEGIN_SRC emacs-lisp
     (def-package 2048-game
       :defer t)
   #+END_SRC
* Credits
  This Emacs configuration was influenced and inspired by the following configurations.
  - [[https://github.com/seagle0128/.emacs.d][Vincent Zhang's Centaur Emacs]]
  - [[https://github.com/hlissner/doom-emacs][Henrik Lissner's Doom Emacs]]
  - [[https://github.com/poncie/.emacs.d][Poncie Reyes's .emacs.d]]
