(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
			 ("melpa stable" . "http://stable.melpa.org/packages/")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

(custom-set-variables
;; custom-set-variables was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
'(package-selected-packages
  (quote
    (elpy undo-tree org-bullets ag dumb-jump treemacs-projectile treemacs-magit treemacs-icons-dired treemacs projectile rjsx-mode json-mode dimmer company page-break-lines dashboard typescript-mode emmet-mode speed-type smartparens smooth-scrolling diminish web-mode flycheck magit tide web-mode-edit-element popup-kill-ring 2048-game format-all counsel ivy avy smex auto-complete which-key use-package doom-themes))))
(custom-set-faces

;; custom-set-faces was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
'(dashboard-banner-logo-title-face ((t (:family "Love LetterTW" :height 125)))))

;; Minimal UI, turn off unnecessary interface
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)

;; Maximize window
(toggle-frame-maximized)

;; No alarms
(setq ring-bell-function 'ignore)

;; Disable splash screen and change scratch message
(setq inhibit-startup-screen t)
(setq initial-scratch-message ";; Close the World, Open the nExt")

;; Show keystrokes in progress
(setq echo-keystrokes 0.1)

;; Move files to trash when deleting
(setq delete-by-moving-to-trash t)

;; Cursor modification
(blink-cursor-mode -1)

;; Force UTF-8 in Emacs everywhere
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

;; Make sentences end with a single space
(setq-default sentence-end-double-space nil)

;; Always have a new line at the end of a file
(setq require-final-newline t)

;; Load the newest version of a file
(setq load-prefer-newer t)

;; Detect external file changes and auto refresh file
(global-auto-revert-mode t)

;; Auto refresh Dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
;; Quickly copy/move file in Dired
(setq dired-dwim-target t)

;; Transparently open compressed files
(auto-compression-mode t)

;; When buffer is closed, saves the cursor location
(save-place-mode 1)

;; Change yes or no prompts to y or n
(fset 'yes-or-no-p 'y-or-n-p)

;; hook line numbers to only when files are opened
(add-hook 'find-file-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)

;; Show matching parentheses
(setq show-paren-delay 0)
(show-paren-mode 1)

;; Prevent Extraneous Tabs
(setq-default indent-tabs-mode nil)

;; Real emacs knights don't use shift to mark things
(setq shift-select-mode nil)

(defun xah-rename-eww-hook ()
  "Rename eww browser's buffer so sites open in new page."
  (rename-buffer "eww" t))
(add-hook 'eww-mode-hook #'xah-rename-eww-hook)

;; C-u M-x eww will force a new eww buffer
(defun modi/force-new-eww-buffer (orig-fun &rest args)
  "ORIG-FUN ARGS When prefix argument is used, a new eww buffer will be created,
  regardless of whether the current buffer is in `eww-mode'."
  (if current-prefix-arg
    (with-temp-buffer
      (apply orig-fun args))
    (apply orig-fun args)))
(advice-add 'eww :around #'modi/force-new-eww-buffer)

;; Resizes the window width based on the input
(defun window-resize-width (w)
  "Resizes the window width based on W."
  (interactive (list (if (> (count-windows) 1)
                         (read-number "Set the current window width (0~1): ")
                         (error "You need more than 1 window to execute this function!"))))
  (message "%s" w)
  (window-resize nil (- (truncate (* w (frame-width))) (window-total-width)) t))

;; Resizes the window height based on the input
(defun window-resize-height (h)
"Resizes the window height based on H."
(interactive (list (if (> (count-windows) 1)
                       (read-number "Set the current window height (0~1): ")
		       (error "You need more than 1 window to execute this function!"))))
  (message "%s" h)
  (window-resize nil (- (truncate (* h (frame-height))) (window-total-height)) nil))

(make-directory "~/.emacs.d/autosaves" t)
(make-directory "~/.emacs.d/backups" t)

(setq backup-directory-alist '(("." . "~/.emacs.d/backups/"))
  auto-save-file-name-transforms  '((".*" "~/.emacs.d/autosaves/\\1" t))
  delete-old-versions -1
  version-control t
  vc-make-backup-files t)

;; Input Mono, Monaco Style, Line Height 1.3 download from http://input.fontbureau.com/
(defvar nox/fonts '(("Input" . 11) ("SF Mono" . 12) ("Consolas" . 12) ("Love LetterTW" . 12.5))
  "List of fonts and sizes.  The first one available will be used.")

(defun nox/change-font ()
  "Documentation."
  (interactive)
  (let* (available-fonts font-name font-size font-setting)
    (dolist (font nox/fonts (setq available-fonts (nreverse available-fonts)))
      (when (member (car font) (font-family-list))
        (push font available-fonts)))

    (if (not available-fonts)
      (error "No fonts from the chosen set are available")
      (if (called-interactively-p 'interactive)
        (let* ((chosen (assoc-string (completing-read "What font to use? " available-fonts nil t) available-fonts)))
          (setq font-name (car chosen) font-size (read-number "Font size: " (cdr chosen))))
        (setq font-name (caar available-fonts) font-size (cdar available-fonts)))

   (setq font-setting (format "%s-%d" font-name font-size))
   (set-frame-font font-setting nil t)
   (add-to-list 'default-frame-alist (cons 'font font-setting)))))

(nox/change-font)

(use-package doom-themes
  :ensure t
  :config (load-theme 'doom-molokai t))

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-banner-logo-title "Present Day, Present Time...")
  (setq dashboard-startup-banner "~/.emacs.d/images/KEC_Dark_BK.png"))
;;  (setq dashboard-startup-banner "~/.emacs.d/images/KEC_Light_BK.png"))

;; init time shown on dashboard
(defun dashboard-init-time (list-size)
  (insert (format "Emacs ready in %.2f seconds with %d garbage collections."
                  (float-time (time-subtract after-init-time before-init-time)) gcs-done)))
(add-to-list 'dashboard-item-generators  '(init-time . dashboard-init-time))
(add-to-list 'dashboard-items '(init-time)) ;; note adding t as 4 param adds to back of list

(use-package page-break-lines
  :ensure t
  :init (global-page-break-lines-mode))

(use-package org
  :ensure t
  :bind
  ("C-c l" . org-store-link)
  ("C-c a" . org-agenda)
  ("C-c c" . org-capture)
  ("C-c b" . org-switch)
  :config
  (setq org-todo-keywords
    '((sequence "TODO" "PROCESS" "VERIFY" "|" "DONE"))))

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook #'org-bullets-mode))

(use-package diminish :ensure t)

(use-package ag :ensure t)

(use-package avy
  :ensure t
  :bind (("C-;" . avy-goto-char-timer)
         ("C-:" . avy-goto-line)))

(use-package smex
  :ensure t
  :init (smex-initialize))

(use-package ivy
  :ensure t
  :diminish ivy-mode ;;Hide ivy in the button screen
  :init (ivy-mode 1)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "【%d/%d】")
  (setq ivy-wrap t))

(use-package counsel
  :ensure t
  :diminish counsel-mode
  :init (counsel-mode 1))

(use-package swiper
  :ensure t
  :bind ("C-s" . swiper))

(use-package smooth-scrolling
  :ensure t
  :config
  (setq scroll-margin 1
    scroll-conservatively 10000
    scroll-step 1
    mouse-wheel-scroll-amount '(2)
    mouse-wheel-progressive-speed nil))

(use-package which-key
  :ensure t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))

(use-package popup-kill-ring
  :ensure t
  :bind ("M-y" . popup-kill-ring))

(use-package undo-tree
  :ensure t
  :init (global-undo-tree-mode))

(use-package dimmer
  :ensure t
  :init (dimmer-mode)
  :config
  (setq dimmer-fraction 0.2)
  (setq dimmer-exclusion-regexp "\\*Minibuf-[0-9]+\\*\\|\\*dashboard\\*"))

(use-package magit
  :ensure t
  :defer t
  :bind ("C-x g" . magit-status))

(use-package projectile
  :ensure t
  :bind ("C-c p" . projectile-command-map)
  :config
  (projectile-mode +1)
  (setq projectile-completion-system 'ivy)
  (setq projectile-enable-caching t)
  (setq projectile-use-native-indexing t)
  (add-to-list 'projectile-globally-ignored-directories "node_modules"))

(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs
      (if (executable-find "python") 3 0)
      treemacs-deferred-git-apply-delay   0.5
      treemacs-display-in-side-window     t
      treemacs-file-event-delay           5000
      treemacs-file-follow-delay          0.2
      treemacs-follow-after-init          t
      treemacs-follow-recenter-distance   0.1
      treemacs-git-command-pipe           ""
      treemacs-goto-tag-strategy          'refetch-index
      treemacs-indentation                2
      treemacs-indentation-string         " "
      treemacs-is-never-other-window      nil
      treemacs-max-git-entries            5000
      treemacs-no-png-images              nil
      treemacs-no-delete-other-windows    t
      treemacs-project-follow-cleanup     nil
      treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
      treemacs-recenter-after-file-follow nil
      treemacs-recenter-after-tag-follow  nil
      treemacs-show-cursor                nil
      treemacs-show-hidden-files          t
      treemacs-silent-filewatch           nil
      treemacs-silent-refresh             nil
      treemacs-sorting                    'alphabetic-desc
      treemacs-space-between-root-nodes   t
      treemacs-tag-follow-cleanup         t
      treemacs-tag-follow-delay           1.5
      treemacs-width                      35)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config
  (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package company
  :ensure t
  :diminish company-mode
  :defer t
  :init (global-company-mode)
  :config
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-align-annotations 't) ; align annotations to the right tooltip border
  (setq company-idle-delay 0) ; decrease delay before autocompletion popup shows
  (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
  (define-key company-mode-map [remap indent-for-tab-command] #'company-indent-or-complete-common)
  (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
  (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
  (setq company-require-match 'never))

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :config
  (flycheck-add-mode 'typescript-tslint 'js2-mode)
  (flycheck-add-mode 'typescript-tslint 'rjsx-mode))

(use-package format-all
  :ensure t
  :init (format-all-mode))

(use-package dumb-jump
  :ensure t
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy))

(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config
  (add-hook 'prog-mode-hook #'smartparens-mode))

(use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode)))

(use-package emmet-mode
  :ensure t
  :config
  (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hooktype  'emmet-mode)) ;; enable Emmet's css abbreviation

(use-package js2-mode 
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode)))

(use-package typescript-mode :ensure t)

(use-package tide
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save))
  :config
  (flycheck-add-mode 'typescript-tslint 'web-mode)
  (add-hook 'js2-mode-hook #'setup-tide-mode)
  (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append))

(use-package speed-type :ensure t)

(use-package 2048-game :ensure t)

;; Eval-buffer for ELisp Code
(global-set-key (kbd "<f5>") 'eval-buffer)

;; Unbind C-z
(global-set-key (kbd "C-z") 'nil)

;; Setup shorcuts for window resize width and height
(global-set-key (kbd "C-x C-|") 'window-resize-width)
(global-set-key (kbd "C-x C-_") 'window-resize-height)
