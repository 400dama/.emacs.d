#+TITLE: MT's GNU Emacs Configuration
* Table of Contents                                                   :TOC_2:
- [[#description][Description]]
- [[#package-management][Package Management]]
  - [[#package-sources][Package Sources]]
  - [[#bootstrap-use-package][Bootstrap =use-package=]]
- [[#essentials][Essentials]]
  - [[#configs][Configs]]
  - [[#more-configs][More Configs]]
- [[#appearance][Appearance]]
  - [[#zone-mode-screensaver][Zone Mode Screensaver]]
  - [[#fonts][Fonts]]
  - [[#doom-theme][Doom Theme]]
  - [[#dashboard][Dashboard]]
  - [[#page-break-lines][Page Break Lines]]
- [[#global-functionalities][Global Functionalities]]
  - [[#org][Org]]
  - [[#diminish][Diminish]]
  - [[#ag-the-silver-searcher][AG The Silver Searcher]]
  - [[#avy][Avy]]
  - [[#smex][Smex]]
  - [[#ivy][Ivy]]
  - [[#counsel][Counsel]]
  - [[#swiper][Swiper]]
  - [[#smooth-scrolling][Smooth Scrolling]]
  - [[#which-key][Which Key]]
  - [[#popup-kill-ring][Popup Kill Ring]]
  - [[#undo-tree][Undo Tree]]
  - [[#dimmer][Dimmer]]
- [[#programming-general][Programming (general)]]
  - [[#magit][Magit]]
  - [[#projectile][Projectile]]
  - [[#treemacs][Treemacs]]
  - [[#company][Company]]
  - [[#flycheck][Flycheck]]
  - [[#format-all][Format All]]
  - [[#dumb-jump][Dumb Jump]]
  - [[#smartparens][Smartparens]]
- [[#web-development][Web Development]]
  - [[#web-mode][Web Mode]]
  - [[#emmet][Emmet]]
  - [[#js2][JS2]]
  - [[#typescript][TypeScript]]
- [[#programming][Programming]]
  - [[#cc][C/C++]]
  - [[#python][Python]]
  - [[#arduino][Arduino]]
- [[#miscellaneous][Miscellaneous]]
  - [[#tetris][Tetris]]
  - [[#speed-type][Speed Type]]
  - [[#2048-game][2048 Game]]
  - [[#pacmacs][Pacmacs]]
- [[#bindings][Bindings]]

* Description
  This file is parsed by [[./init.el][init.el]] which then evaluates all =emacs-lisp= code blocks during startup.
  
  It is designed that, if the user clones this repository into their =HOME= directory set in Windows Environment Variables, and there is a stable connection to [[#package-sources][Package Sources]] below, then they can use most of my custom EMACS configurations out-of-the-box! Exceptions are noted as *Prerequisite*, simple =Ctrl-F= will lead you there.

  This configuration is designed and tested for Emacs 26.1 and above.

* Package Management
** Package Sources
   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (setq package-enable-at-startup nil)
   (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                            ("gnu"   . "http://elpa.gnu.org/packages/")
                            ("melpa" . "https://melpa.org/packages/")
			    ("melpa stable" . "http://stable.melpa.org/packages/")))
   (package-initialize)
   #+END_SRC
** Bootstrap =use-package=
   My =.emacs.d/= is almost entirely dependant on [[https://github.com/jwiegley/use-package][use-package]].
   #+BEGIN_QUOTE
   The =use-package= macro allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy. I created it because I have over 80 packages that I use in Emacs, and things were getting difficult to manage. Yet with this utility my total load time is around 2 seconds, with no loss of functionality!
   #+END_QUOTE
   Start using =use-package=
   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (require 'use-package)
   #+END_SRC
* Essentials
** Configs
   Some essential configs that make my life a lot easier
   #+BEGIN_SRC emacs-lisp
   ;; Minimal UI, turn off unnecessary interface
   (scroll-bar-mode -1)
   (tool-bar-mode   -1)
   (tooltip-mode    -1)
   (menu-bar-mode   -1)
   
   ;; Maximize window
   (toggle-frame-maximized)

   ;; Unbind C-z to use as prefix
   (global-set-key (kbd "C-z") 'nil)

   ;; No alarms
   (setq ring-bell-function 'ignore)

   ;; Disable splash screen and change scratch message
   (setq inhibit-startup-screen t)
   (setq initial-scratch-message ";; Close the World, Open the nExt")
   
   ;; Show keystrokes in progress
   (setq echo-keystrokes 0.1)
   
   ;; Move files to trash when deleting
   (setq delete-by-moving-to-trash t)
   
   ;; Cursor modification
   (blink-cursor-mode -1)
   
   ;; Force UTF-8 in Emacs everywhere
   (setq locale-coding-system 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   (set-selection-coding-system 'utf-8)
   (prefer-coding-system 'utf-8)
   (when (display-graphic-p)
   (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   
   ;; Make sentences end with a single space
   (setq-default sentence-end-double-space nil)
   
   ;; Always have a new line at the end of a file
   (setq require-final-newline t)
   
   ;; Load the newest version of a file
   (setq load-prefer-newer t)
   
   ;; Detect external file changes and auto refresh file
   (global-auto-revert-mode t)
   
   ;; Auto refresh Dired, but be quiet about it
   (setq global-auto-revert-non-file-buffers t)
   (setq auto-revert-verbose nil)
   ;; Quickly copy/move file in Dired
   (setq dired-dwim-target t)
   
   ;; Transparently open compressed files
   (auto-compression-mode t)
   
   ;; When buffer is closed, saves the cursor location
   (save-place-mode 1)
   
   ;; Change yes or no prompts to y or n
   (fset 'yes-or-no-p 'y-or-n-p)

   ;; hook line numbers to only when files are opened
   (add-hook 'find-file-hook #'display-line-numbers-mode)
   (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   
   ;; Show matching parentheses
   (setq show-paren-delay 0)
   (show-paren-mode 1)
   
   ;; Prevent Extraneous Tabs
   (setq-default indent-tabs-mode nil)
   
   ;; Real emacs knights don't use shift to mark things
   (setq shift-select-mode nil)

   ;; Add personal lisp files
   (add-to-list 'load-path "~/.emacs.d/lisp/")
   #+END_SRC
** More Configs
   Other important, but longer configs.
*** Auto-rename New EWW Buffers
    #+BEGIN_SRC emacs-lisp
    (defun xah-rename-eww-hook ()
      "Rename eww browser's buffer so sites open in new page."
      (rename-buffer "eww" t))
    (add-hook 'eww-mode-hook #'xah-rename-eww-hook)

    ;; C-u M-x eww will force a new eww buffer
    (defun modi/force-new-eww-buffer (orig-fun &rest args)
      "ORIG-FUN ARGS When prefix argument is used, a new eww buffer will be created,
      regardless of whether the current buffer is in `eww-mode'."
      (if current-prefix-arg
        (with-temp-buffer
          (apply orig-fun args))
	(apply orig-fun args)))
    (advice-add 'eww :around #'modi/force-new-eww-buffer)
    #+END_SRC
*** Resize Window Width / Height Functions
    #+BEGIN_SRC emacs-lisp
    ;; Resizes the window width based on the input
    (defun window-resize-width (w)
      "Resizes the window width based on W."
      (interactive (list (if (> (count-windows) 1)
                             (read-number "Set the current window width (0~1): ")
                             (error "You need more than 1 window to execute this function!"))))
      (message "%s" w)
      (window-resize nil (- (truncate (* w (frame-width))) (window-total-width)) t))

    ;; Resizes the window height based on the input
    (defun window-resize-height (h)
    "Resizes the window height based on H."
    (interactive (list (if (> (count-windows) 1)
                           (read-number "Set the current window height (0~1): ")
			   (error "You need more than 1 window to execute this function!"))))
      (message "%s" h)
      (window-resize nil (- (truncate (* h (frame-height))) (window-total-height)) nil))
    #+END_SRC
*** Autosave and Backup
    Create directory where Emacs stores backups and autosave files.
    #+BEGIN_SRC emacs-lisp
    (make-directory "~/.emacs.d/autosaves" t)
    (make-directory "~/.emacs.d/backups" t)
    #+END_SRC
    Set autosave and backup directory.
    #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups/"))
      auto-save-file-name-transforms  '((".*" "~/.emacs.d/autosaves/\\1" t))
      delete-old-versions -1
      version-control t
      vc-make-backup-files t)
    #+END_SRC
* Appearance
** Zone Mode Screensaver
   [[https://www.emacswiki.org/emacs/ZoneMode][Zone mode]] 'zones' Emacs out, choosing one of its random modes to obfuscate the current buffer, which can be used as a screensaver.
   #+BEGIN_SRC emacs-lisp
   (require 'zone)
   (zone-when-idle 120)
   (defun zone-choose (pgm)
     "Choose a PGM to run for `zone'."
     (interactive
     (list
       (completing-read
         "Program: "
         (mapcar 'symbol-name zone-programs))))
     (let ((zone-programs (list (intern pgm))))
       (zone)))
   #+END_SRC
** Fonts
   Prepare fonts
   #+BEGIN_SRC emacs-lisp
   ;; Input Mono, Monaco Style, Line Height 1.3 download from http://input.fontbureau.com/
   (defvar nox/fonts '(("Input" . 11) ("SF Mono" . 12) ("Consolas" . 12) ("Love LetterTW" . 12.5))
     "List of fonts and sizes.  The first one available will be used.")
   #+END_SRC
   Change-fonts 
   #+BEGIN_SRC emacs-lisp
   (defun nox/change-font ()
     "Documentation."
     (interactive)
     (let* (available-fonts font-name font-size font-setting)
       (dolist (font nox/fonts (setq available-fonts (nreverse available-fonts)))
         (when (member (car font) (font-family-list))
           (push font available-fonts)))

       (if (not available-fonts)
         (error "No fonts from the chosen set are available")
	 (if (called-interactively-p 'interactive)
           (let* ((chosen (assoc-string (completing-read "What font to use? " available-fonts nil t) available-fonts)))
             (setq font-name (car chosen) font-size (read-number "Font size: " (cdr chosen))))
           (setq font-name (caar available-fonts) font-size (cdar available-fonts)))

      (setq font-setting (format "%s-%d" font-name font-size))
      (set-frame-font font-setting nil t)
      (add-to-list 'default-frame-alist (cons 'font font-setting)))))

   (nox/change-font)
   #+END_SRC
** Doom Theme
   [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is an UI plugin and pack of theme, and my Emacs currenty using Molokai theme
   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :ensure t
     :config (load-theme 'doom-molokai t))
   #+END_SRC
** Dashboard
   [[https://github.com/rakanalh/emacs-dashboard][Dashboard]] is an extensible Emacs startup screen.
   
   Use either =KEC_Dark_BK.png= or =KEC_Light_BK.png= depends on the backgrond theme
   #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook)
     (setq dashboard-banner-logo-title "Present Day, Present Time...")
     (setq dashboard-startup-banner "~/.emacs.d/images/KEC_Dark_BK.png"))
   ;;  (setq dashboard-startup-banner "~/.emacs.d/images/KEC_Light_BK.png"))

   ;; init time shown on dashboard
   (defun dashboard-init-time (list-size)
     (insert (format "Emacs ready in %.2f seconds with %d garbage collections."
                     (float-time (time-subtract after-init-time before-init-time)) gcs-done)))
   (add-to-list 'dashboard-item-generators  '(init-time . dashboard-init-time))
   (add-to-list 'dashboard-items '(init-time)) ;; note adding t as 4 param adds to back of list
   #+END_SRC
** Page Break Lines
   [[https://github.com/purcell/page-break-lines][Page-break-lines]] displays ugly form feed characters as tidy horizontal rules.
   #+BEGIN_SRC emacs-lisp
   (use-package page-break-lines
     :ensure t
     :init (global-page-break-lines-mode))
   #+END_SRC
* Global Functionalities
** Org
   [[https://orgmode.org/][Org]] is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.
*** Org Mode Setup
    #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :bind
      ("C-c l" . org-store-link)
      ("C-c a" . org-agenda)
      ("C-c c" . org-capture)
      ("C-c b" . org-switch)
      :config
      (setq org-todo-keywords
        '((sequence "TODO" "PROCESS" "VERIFY" "|" "DONE"))))
    #+END_SRC
*** Org Bullets
    [[https://github.com/sabof/org-bullets][Org bullets]] shows bullets as UTF-8 characters.
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook #'org-bullets-mode))
    #+END_SRC
*** TOC Org
    [[https://github.com/snosov1/toc-org][TOC Org]] generates table of contents for =.org= files
    #+BEGIN_SRC emacs-lisp
    (use-package toc-org
      :ensure t
      :config (add-hook 'org-mode-hook 'toc-org-mode))
    #+END_SRC
** Diminish
   [[https://github.com/emacsmirror/diminish][Diminish]] removes certain minor modes from mode-line
   #+BEGIN_SRC emacs-lisp
   (use-package diminish :ensure t)
   #+END_SRC
** AG The Silver Searcher
   [[https://github.com/ggreer/the_silver_searcher][AG The Silver Searcher]] is a fast code searching tool.
   
   *Prerequisite*: [[https://github.com/k-takata/the_silver_searcher-win32][AG for Windows]] must be installed and put in the Path.
   #+BEGIN_SRC emacs-lisp
   (use-package ag
     :ensure t
     :bind ("C-z C-s" . ag))
   #+END_SRC
** Avy
   [[https://github.com/abo-abo/avy][Avy]] is a nice way to move around text.
   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :bind (("C-;" . avy-goto-char-timer)
            ("C-:" . avy-goto-line)))
   #+END_SRC
** Smex
   [[https://github.com/nonsequitur/smex][Smex]] is a M-x enhancement tool for Emacs.
   #+BEGIN_SRC emacs-lisp
   (use-package smex
     :ensure t
     :init (smex-initialize))
   #+END_SRC
** Ivy
   [[https://github.com/abo-abo/swiper][Ivy]], a generic completion mechanism for Emacs.
   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :diminish ivy-mode ;;Hide ivy in the button screen
     :init (ivy-mode 1)
     :config
     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "【%d/%d】")
     (setq ivy-wrap t))
   #+END_SRC
** Counsel
   [[https://github.com/abo-abo/swiper][Counsel]], a collection of Ivy-enhanced versions of common Emacs commands.
   #+BEGIN_SRC emacs-lisp
   (use-package counsel
     :ensure t
     :diminish counsel-mode
     :init (counsel-mode 1))
   #+END_SRC
** Swiper
   [[https://github.com/abo-abo/swiper][Swiper]], an Ivy-enhanced alternative to isearch.
   #+BEGIN_SRC emacs-lisp
   (use-package swiper
     :ensure t
     :bind ("C-s" . swiper))
   #+END_SRC
** Smooth Scrolling
   [[https://github.com/aspiers/smooth-scrolling][Smooth scrolling]] offers a minor mode that makes Emacs scroll smoothly.
   #+BEGIN_SRC emacs-lisp
   (use-package smooth-scrolling
     :ensure t
     :config
     (setq scroll-margin 1
       scroll-conservatively 10000
       scroll-step 1
       mouse-wheel-scroll-amount '(2)
       mouse-wheel-progressive-speed nil))
   #+END_SRC
** Which Key
   [[https://github.com/justbur/emacs-which-key][Which key]] is a minor mode that displays the key bindings following the incomplete command.
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :init
     (setq which-key-separator " ")
     (setq which-key-prefix-prefix "+")
     :config
     (which-key-mode))
   #+END_SRC
** Popup Kill Ring
   [[https://github.com/waymondo/popup-kill-ring][Popup kill ring]] provides the ability to browse Emacs kill ring in autocomplete style popup menu.
   #+BEGIN_SRC emacs-lisp
   (use-package popup-kill-ring
     :ensure t
     :bind ("M-y" . popup-kill-ring))
   #+END_SRC
** Undo Tree
   [[https://www.emacswiki.org/emacs/UndoTree][Undo tree]] provides a visualization of the undos in a file.
   #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :ensure t
     :diminish undo-tree-mode
     :init (global-undo-tree-mode))
   #+END_SRC
** Dimmer
   [[https://github.com/gonewest818/dimmer.el][Dimmer]] visually highlights the selected buffer.
   #+BEGIN_SRC emacs-lisp
   (use-package dimmer
     :ensure t
     :init (dimmer-mode)
     :config
     (setq dimmer-fraction 0.2)
     (setq dimmer-exclusion-regexp "\\*Minibuf-[0-9]+\\*\\|\\*dashboard\\*"))
   #+END_SRC
* Programming (general)
** Magit
   [[https://magit.vc/][Magit]] is an interface to the version control system Git
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :defer t
     :bind ("C-x g" . magit-status))
   #+END_SRC
** Projectile
   [[https://github.com/bbatsov/projectile][Projectile]] is a Project Interaction Library for Emacs.
   
   *Prerequisite*: Install [[https://github.com/bmatzelle/gow][Gow]] before proceding and make sure it is in the Path. Gow is a lightweight installer that installs useful open source UNIX applications compiled as native win32 binaries. Especially, =tr= is needed for Projectile alien indexing.
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :bind
     ("C-c p" . projectile-command-map)
     ("C-z C-d" . projectile-switch-project)
     :config
     (projectile-mode +1)
     (setq projectile-completion-system 'ivy)
       (when (eq system-type 'windows-nt)
       (setq projectile-indexing-method 'alien))
     (add-to-list 'projectile-globally-ignored-directories "node_modules"))
   #+END_SRC
** Treemacs
   [[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a tree layout file explorer for Emacs.
*** Treemacs
    #+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
        (setq treemacs-collapse-dirs
          (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay   0.5
	  treemacs-display-in-side-window     t
          treemacs-file-event-delay           5000
          treemacs-file-follow-delay          0.2
          treemacs-follow-after-init          t
          treemacs-follow-recenter-distance   0.1
          treemacs-git-command-pipe           ""
          treemacs-goto-tag-strategy          'refetch-index
          treemacs-indentation                2
          treemacs-indentation-string         " "
          treemacs-is-never-other-window      nil
          treemacs-max-git-entries            5000
          treemacs-no-png-images              nil
          treemacs-no-delete-other-windows    t
          treemacs-project-follow-cleanup     nil
          treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow  nil
          treemacs-show-cursor                nil
          treemacs-show-hidden-files          t
          treemacs-silent-filewatch           nil
          treemacs-silent-refresh             nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-space-between-root-nodes   t
          treemacs-tag-follow-cleanup         t
          treemacs-tag-follow-delay           1.5
          treemacs-width                      35)
          ;; The default width and height of the icons is 22 pixels. If you are
          ;; using a Hi-DPI display, uncomment this to double the icon size.
          ;;(treemacs-resize-icons 44)
          (treemacs-follow-mode t)
          (treemacs-filewatch-mode t)
          (treemacs-fringe-indicator-mode t)
          (pcase (cons (not (null (executable-find "git")))
                       (not (null (executable-find "python3"))))
                 (`(t . t) (treemacs-git-mode 'deferred))
                 (`(t . _) (treemacs-git-mode 'simple))))
      :bind
      (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
   #+END_SRC
*** Treemacs Icons Dired
    #+BEGIN_SRC emacs-lisp
    (use-package treemacs-icons-dired
      :after treemacs dired
      :ensure t
      :config
      (treemacs-icons-dired-mode))
    #+END_SRC
*** Treemacs Magit
    #+BEGIN_SRC emacs-lisp
    (use-package treemacs-magit
      :after treemacs magit
      :ensure t)
    #+END_SRC
*** Treemacs Projectile
    #+BEGIN_SRC emacs-lisp
    (use-package treemacs-projectile
      :after treemacs projectile
      :ensure t)
    #+END_SRC
** Company
   [[http://company-mode.github.io/][Company]] stands for Complete Anything, it is a text completion framework for Emacs.
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :diminish company-mode
     :defer t
     :init (global-company-mode)
     :config
     (setq company-minimum-prefix-length 1)
     (setq company-tooltip-align-annotations 't) ; align annotations to the right tooltip border
     (setq company-idle-delay 0) ; decrease delay before autocompletion popup shows
     (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
     (define-key company-mode-map [remap indent-for-tab-command] #'company-indent-or-complete-common)
     (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
     (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
     (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
     (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
     (setq company-require-match 'never))
   #+END_SRC
** Flycheck
   [[https://www.flycheck.org/en/latest/][Flycheck]] is a syntax checking extension.
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t
     :init (global-flycheck-mode)
     :config
     (flycheck-add-mode 'typescript-tslint 'js2-mode)
     (flycheck-add-mode 'typescript-tslint 'rjsx-mode))
   #+END_SRC
** Format All
   [[https://github.com/lassik/emacs-format-all-the-code][Format all]] lets you auto-format source code.
   #+BEGIN_SRC emacs-lisp
   (use-package format-all
     :ensure t
     :init (format-all-mode))
   #+END_SRC
** Dumb Jump
   [[https://github.com/jacktasia/dumb-jump][Dumb jump]] is an Emacs "jump to definition" package.
   #+BEGIN_SRC emacs-lisp
   (use-package dumb-jump
     :ensure t
     :bind (("M-g o" . dumb-jump-go-other-window)
            ("M-g j" . dumb-jump-go)
            ("M-g i" . dumb-jump-go-prompt)
            ("M-g x" . dumb-jump-go-prefer-external)
            ("M-g z" . dumb-jump-go-prefer-external-other-window))
     :config (setq dumb-jump-selector 'ivy))
   #+END_SRC
** Smartparens
   [[https://github.com/Fuco1/smartparens][Smartparens]] is a minor mode for dealing with pairs.
   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
     :ensure t
     :diminish smartparens-mode
     :config
     (add-hook 'prog-mode-hook #'smartparens-mode))
   #+END_SRC
* Web Development
** Web Mode
   [[https://github.com/fxbois/web-mode][Web mode]] is a major mode for editing web templates.
   #+BEGIN_SRC emacs-lisp
   (use-package web-mode
     :ensure t
     :config
     (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.[t]?html?\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode)))
   #+END_SRC
** Emmet
   [[https://github.com/smihica/emmet-mode][Emmet]] writes HTML by using CSS selectors along with =C-j=. See [[https://github.com/smihica/emmet-mode#usage][usage]] for more information.
   #+BEGIN_SRC emacs-lisp
   (use-package emmet-mode
     :ensure t
     :config
     (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
     (add-hook 'css-mode-hooktype  'emmet-mode)) ;; enable Emmet's css abbreviation
   #+END_SRC
** JS2
   [[https://github.com/mooz/js2-mode][JS2 mode]] offers improved JavsScript editing mode.
   #+BEGIN_SRC emacs-lisp
   (use-package js2-mode 
     :ensure t
     :config
     (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
     (add-to-list 'interpreter-mode-alist '("node" . js2-mode)))
   #+END_SRC
** TypeScript
*** TypeScript Mode
    [[https://github.com/emacs-typescript/typescript.el][TypeScript mode]] offers TypeScript support for Emacs.
    #+BEGIN_SRC emacs-lisp
    (use-package typescript-mode :ensure t)
    #+END_SRC
*** Tide
    [[https://github.com/ananthakumaran/tide][Tide]] is TypeScript Interactive Development Environment for Emacs.
    Tip: enter =M-.= to jump to definition
    #+BEGIN_SRC emacs-lisp
    (use-package tide
      :ensure t
      :after (typescript-mode company flycheck)
      :hook ((typescript-mode . tide-setup)
             (typescript-mode . tide-hl-identifier-mode)
             (before-save . tide-format-before-save))
      :config
      (setq tide-completion-enable-autoimport-suggestions t)
      (flycheck-add-mode 'typescript-tslint 'web-mode)
      (add-hook 'js2-mode-hook #'setup-tide-mode)
      (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append))
    #+END_SRC
* Programming
** C/C++
*** Irony
    [[https://github.com/Sarcasm/irony-mode][Irony mode]] is an Emacs minor mode that improves editing experience in C/C++.
    
    *Prerequisite*: Read [[https://github.com/Sarcasm/irony-mode#irony-server-prerequisites][Irony Server Prerequisites]] and download [[https://cmake.org/download/][CMake]] >= 2.8.3 and [[http://releases.llvm.org/download.html][libclang]].
    #+BEGIN_SRC emacs-lisp
    (use-package irony
      :ensure t
      :config
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'objc-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
    #+END_SRC
    Windows performance tweaks
    #+BEGIN_SRC emacs-lisp
    (when (boundp 'w32-pipe-read-delay)
      (setq w32-pipe-read-delay 0))
    ;; Set the buffer size to 64K on Windows (from the original 4K)
    (when (boundp 'w32-pipe-buffer-size)
    (setq irony-server-w32-pipe-buffer-size (* 64 1024)))
    #+END_SRC
*** Company Irony
    [[https://github.com/Sarcasm/company-irony][Company Irony]] provides completion backend for the C, C++ and Objective-C languages.
    #+BEGIN_SRC emacs-lisp
    (use-package company-irony
      :ensure t
      :config
      (add-to-list 'company-backends 'company-irony))
    #+END_SRC
*** Company Irony C Headers
    [[https://github.com/hotpxl/company-irony-c-headers/][Company Irony C Headers]] provides a company-mode backend for C/C++ header files that works with irony-mode.
    
    This package is meant to be complementary to company-irony by offering completion suggestions to header files.
    #+BEGIN_SRC emacs-lisp
    (use-package company-irony-c-headers
      :ensure t
      :config
      (add-to-list 'company-backends 'company-irony)
      (add-to-list 'company-backends 'company-c-headers))
    #+END_SRC
** Python
   *Prerequisite*:
   Install required Python packages:
   #+BEGIN_SRC text
   # Either of these
   pip install rope
   pip install jedi
   # flake8 for code checks
   pip install flake8
   # and autopep8 for automatic PEP8 formatting
   pip install autopep8
   # and yapf for code formatting
   pip install yapf
   #+END_SRC
*** Elpy
    [[https://github.com/jorgenschaefer/elpy][Elpy]] is Emacs Python Development Environment.
    #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :defer 2
      :config
      (progn
        ;; Use Flycheck instead of Flymake
        (when (require 'flycheck nil t)
              (remove-hook 'elpy-modules 'elpy-module-flymake)
              (remove-hook 'elpy-modules 'elpy-module-yasnippet)
              (remove-hook 'elpy-mode-hook 'elpy-module-highlight-indentation)
              (add-hook 'elpy-mode-hook 'flycheck-mode))
        (elpy-enable)
        ;; jedi is great
        (setq elpy-rpc-backend "jedi")))
    #+END_SRC
*** TODO Jedi package, e     
** Arduino
*** Arduino Mode
    [[https://github.com/bookest/arduino-mode][Arduino mode]] is a major mode for editing Arduino sketches.
    #+BEGIN_SRC emacs-lisp
    (use-package arduino-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.ino\\'" . arduino-mode))
      (add-to-list 'auto-mode-alist '("\\.pde\\'" . arduino-mode))
      (autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t))
   #+END_SRC
*** Company Arduino
    [[https://github.com/yuutayamada/company-arduino][Company Arduino]] is a set of configuration to let you auto-completion by using irony-mode, company-irony and company-c-headers on arduino-mode.
    #+BEGIN_SRC emacs-lisp
    (use-package company-arduino
      :ensure t
      :config
      (add-hook 'irony-mode-hook 'company-arduino-turn-on))

    ;; Configuration for company-c-headers.el
    ;; The `company-arduino-append-include-dirs' function appends
    ;; Arduino's include directories to the default directories
    ;; if `default-directory' is inside `company-arduino-home'. Otherwise
    ;; just returns the default directories.
    ;; Please change the default include directories accordingly.
    (defun my-company-c-headers-get-system-path ()
      "Return the system include path for the current buffer."
      (let ((default '("/usr/include/" "/usr/local/include/")))
        (company-arduino-append-include-dirs default t)))
    (setq company-c-headers-path-system 'my-company-c-headers-get-system-path) 
    
    ;; Activate irony-mode on arduino-mode
    (add-hook 'arduino-mode-hook 'irony-mode)
    #+END_SRC
* Miscellaneous
** Tetris
   Although [[https://www.emacswiki.org/emacs/TetrisMode][Tetris]] is part of Emacs, but there still could be some configurations.
   #+BEGIN_SRC emacs-lisp
   (defvar tetris-mode-map
     (make-sparse-keymap 'tetris-mode-map))
   (define-key tetris-mode-map (kbd "C-p") 'tetris-rotate-prev)
   (define-key tetris-mode-map (kbd "C-n") 'tetris-move-down)
   (define-key tetris-mode-map (kbd "C-b") 'tetris-move-left)
   (define-key tetris-mode-map (kbd "C-f") 'tetris-move-right)
   (define-key tetris-mode-map (kbd "C-SPC") 'tetris-move-bottom)
   (defadvice tetris-end-game (around zap-scores activate)
     (save-window-excursion ad-do-it))
   #+END_SRC
** Speed Type
   [[https://github.com/hagleitn/speed-type][Speed type]] is a game to practice touch/speed typing in Emacs.
   #+BEGIN_SRC emacs-lisp
   (use-package speed-type :ensure t)
   #+END_SRC
** 2048 Game
   [[https://bitbucket.org/zck/2048.el][2048 Game]] is an implementation of 2048 in Emacs.
   #+BEGIN_SRC emacs-lisp
   (use-package 2048-game :ensure t)
   #+END_SRC
** Pacmacs
   [[https://github.com/emacsmirror/pacmacs][Pacmacs]] is Pacman for Emacs.
   #+BEGIN_SRC emacs-lisp
   (use-package pacmacs :ensure t)
   #+END_SRC
* Bindings
  Place any global keybindings here.
  #+BEGIN_SRC emacs-lisp
  ;; Eval-buffer for ELisp Code
  (global-set-key (kbd "<f5>") 'eval-buffer)

  ;; Compile for C code
  (global-set-key (kbd "C-<f5>") 'compile)

  ;; Setup shorcuts for window resize width and height
  (global-set-key (kbd "C-x C-|") 'window-resize-width)
  (global-set-key (kbd "C-x C-_") 'window-resize-height)
  
  ;; Use iBuffer instead of Buffer List
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC
